apply plugin: 'com.android.application'
import groovy.swing.SwingBuilder

android {

    compileSdkVersion 24
    buildToolsVersion "24.0.0"

    defaultConfig {
        applicationId "paularanas.com.capstone_project"
        minSdkVersion 14
        targetSdkVersion 24
        versionCode 3
        versionName "1.1"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
        signingConfigs {
            release {
                storeFile file("C:\\Users\\Paul\\keystore.jks")
                storePassword ''
                keyAlias ''
                keyPassword ''
            }
        }


    buildTypes {
            release {

                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
                signingConfig signingConfigs.release
            }

        }


    }

            dependencies {
                compile fileTree(include: ['*.jar'], dir: 'libs')
                compile project(':javalib')
                testCompile 'junit:junit:4.12'
                compile project(path: ':backend', configuration: 'android-endpoints')
                compile 'com.android.support:support-v4:24.0.0'
                compile 'com.android.support:design:24.0.0'
                compile 'com.android.support:support-v13:24.0.0'
                compile 'com.android.support:appcompat-v7:24.0.0'
                compile 'com.android.support:palette-v7:24.0.0'
                compile 'com.android.support:recyclerview-v7:24.0.0'
                compile 'com.google.maps.android:android-maps-utils:0.4+'
                compile 'com.squareup.picasso:picasso:2.5.2'
                compile 'com.google.android.gms:play-services-maps:9.0.2'
                compile 'com.google.android.gms:play-services-location:9.0.2'
                compile 'com.google.android.gms:play-services-analytics:9.0.2'
                androidTestCompile 'junit:junit:4.12'

                androidTestCompile 'com.android.support:support-annotations:24.0.0'
                androidTestCompile 'com.android.support.test:runner:0.4'
                androidTestCompile 'com.android.support.test:rules:0.4'
                androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.1'
                androidTestCompile('com.android.support.test.espresso:espresso-contrib:2.2.1') {
                    exclude group: 'com.android.support', module: 'appcompat'
                    exclude group: 'com.android.support', module: 'support-v4'
                    exclude module: 'recyclerview-v7'
                }
                configurations.all {
                    resolutionStrategy {
                        force 'com.android.support:support-annotations:23.1.1'
                        force 'org.hamcrest:hamcrest-core:1.3'
                        force 'com.google.code.findbugs:jsr305:2.0.1'
                    }
                }

            }


// https://www.timroes.de/2014/01/19/using-password-prompts-with-gradle-build-files/
gradle.taskGraph.whenReady { taskGraph ->
    if (taskGraph.hasTask(':app:assembleRelease')) {
        def storePass = ''
        def aliasPass = ''
        def keyPass = ''

        if (System.console() == null) {
            new SwingBuilder().edt {
                dialog(modal: true, title: 'Enter password', alwaysOnTop: true, resizable: false, locationRelativeTo: null, pack: true, show: true) {
                    vbox {
                        label(text: "Please enter store passphrase:")
                        def input1 = passwordField()
                        label(text: "Please enter key Alias:")
                        def input2 = passwordField()
                        label(text: "Please enter key passphrase:")
                        def input3 = passwordField()
                        button(defaultButton: true, text: 'OK', actionPerformed: {
                            storePass = input1.password;
                            aliasPass = input2.password;
                            keyPass = input3.password;
                            dispose();
                        })
                    }
                }
            }
        } else {
            storePass = System.console().readPassword("\nPlease enter store passphrase: ")
            aliasPass = System.console().readPassword("\nPlease enter alias: ")
            keyPass = System.console().readPassword("\nPlease enter key passphrase: ")
        }

        if (storePass.size() <= 0 || keyPass.size() <= 0 || aliasPass.size() <= 0) {
            throw new InvalidUserDataException("You must enter the passwords to proceed.")
        }

        storePass = new String(storePass)
        aliasPass = new String (aliasPass)
        keyPass = new String(keyPass)

        android.signingConfigs.release.storePassword = storePass
        android.signingConfigs.release.keyAlias = aliasPass
        android.signingConfigs.release.keyPassword = keyPass
    }
}
